Homework 1 gave you extensive experience with the Set type using both arrays and dynamically-allocated arrays. In this project, you will re-write the implementation of the Set type to employ a doubly-linked list rather than an array. You must not use arrays. You will also implement a couple of algorithms that operate on sets.

Implement Set yet again
Consider the Set interface from problem 2 of Homework 1:

using ItemType = TheTypeOfElementGoesHere;

class Set
{
  public:
    Set();
    bool empty() const;
    int size() const;
    bool insert(const ItemType& value);
    bool erase(const ItemType& value);
    bool contains(const ItemType& value) const;
    bool get(int pos, ItemType& value) const;
    void swap(Set& other);
};
In problem 3 of Homework 1, you implemented this interface using an array. For this project, implement this Set interface using a doubly-linked list. (You must not use the list class template from the C++ library.)

For the array implementation of problem 3 of Homework 1, since you declared no destructor, copy constructor, or assignment operator, the compiler wrote them for you, and they did the right thing. For this linked list implementation, if you let the compiler write the destructor, copy constructor, and assignment operator, they will do the wrong thing, so you will have to declare and implement these public member functions as well:

Destructor
When a Set is destroyed, the nodes in the linked list must be deallocated.
Copy constructor
When a brand new Set is created as a copy of an existing Set, enough new nodes must be allocated to hold a duplicate of the original list.
Assignment operator
When an existing Set (the left-hand side) is assigned the value of another Set (the right-hand side), the result must be that the left-hand side object is a duplicate of the right-hand side object, with no memory leak of list nodes (i.e. no list node from the old value of the left-hand side should be still allocated yet inaccessible).
Notice that there is now no a priori limit on the maximum number of items in the Set. Notice also that, as in Homework 1, if a Set has a size of n, then the values of the first parameter to get for which that function retrieves an item (that was previously inserted by a call to insert) and returns true are 0, 1, 2, …, n−1; for other values, it returns false without setting its second parameter. For example:

        Set ss;  // ItemType is std::string
        ss.insert("ccc");
        ss.insert("aaa");
        ss.insert("bbb");
        ItemType x = "xxx";
        assert(!ss.get(3, x)  &&  x == "xxx");  // x is unchanged
        assert(ss.get(1, x)  &&  x == "bbb");   // "bbb" is greater than
                                                // exactly 1 item
This is the same visible behavior as in Homework 1.

Another requirement is that as in Problem 5 of Homework 1, the number of statement executions when swapping two sets must be the same no matter how many items are in the sets.

Implement some set algorithms
Implement the following two functions. Notice that they are non-member functions: They are not members of Set or any other class, so they must not access private members of Set.

void unite(const Set& s1, const Set& s2, Set& result);
When this function returns, result must contain one copy of each of the values that appear in s1 or s2 or both, and must not contain any other values. (You must not assume result is empty when it is passed in to this function; it might not be.) Since result is a Set, it must, of course, not have any duplicates. For example, if s1 were a set of ints into which the values

     2 8 3 9 5
have been inserted, and s2 had the values

     6 3 8 5 10
inserted, then no matter what value it had before, result must end up as a set containing one instance of each of these values and no others (not necessarily in this order):

     9 3 6 5 10 2 8
void butNot(const Set& s1, const Set& s2, Set& result);
When this function returns, result must contain one copy of each of the values that appear in s1 but not s2, and must not contain any other values. (You must not assume result is empty when it is passed in to this function; it might not be.) For example, if s1 and s2 were as in the example above, result must end up as a set containing one instance of each of these values and no others (not necessarily in this order):

     9 2
(Here's a use for butNot: Given a set of id numbers of students who are enrolled in this class, and a set of id numbers of students who turned in Homework 1, how would you get a set of enrolled students who didn't turn in the homework?)

Be sure that in the face of aliasing, these functions behave as this spec requires: Does your implementation work correctly if s1 and result refer to the same Set, for example?
